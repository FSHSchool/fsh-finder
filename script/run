#!/usr/bin/env ruby

require 'liquid'

# Add `lib/` folder to load path for `require()`
libdir = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift(libdir) unless $LOAD_PATH.include?(libdir)

require 'features'
require 'repo_collection'
require 'repo_sources'

# The `context` (the data used to populate the Liquid template) is cached to make iterative changes to the template
# quicker.
cache_path = File.expand_path('../generated/cache.json', File.dirname(__FILE__))
if !File.file?(cache_path)

  # The `RepoCollection` object created here holds a deduplicated set of `Repo` objects. These `Repo` objects are
  # assessed for the FSH language features included below.
  #
  # Multiple `RepoSource` classes can be listed here to pull repos from multiple sources. See `lib/repo_sources.rb`
  # for details.
  repos_collection = RepoCollection.new(
    RepoSourceGitHubOrgsWithClone.repos
    # RepoSourceTest.repos
  )

  # Assess repos for the FSH language features we want to look for. They are defined in `lib/features.rb`
  repos_collection.assess_repos_thread_pool(
    FeatureSushiOne,
    FeatureSushiOld
  )

  repos_json = repos_collection.to_json
  File.open(cache_path, 'w') { |f| f.write(repos_json) }
  context = repos_collection.as_json
else
  context = JSON.parse(IO.read(cache_path))
end

# Create HTML output
template = Liquid::Template.parse(IO.read(File.expand_path('../template.liquid', File.dirname(__FILE__))))
File.open(File.expand_path('../generated/index.html', File.dirname(__FILE__)), 'w') { |f| f.write(template.render(context)) }

# Output list of repos with FSH
File.open(File.expand_path('../generated/fshy_repos.txt', File.dirname(__FILE__)), 'w') do |f|
  f.write(context['fshy_repos'].join("\n"))
end

puts 'done'